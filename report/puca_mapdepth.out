==========================================
SLURM_JOB_ID = 42860841
SLURM_NODELIST = bm8
==========================================
Settings:
  Output files: "02_mapping/SRR6048908/contigs.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  01_megahit/SRR6048908/final.contigs.fa
Reading reference sizes
  Time reading reference sizes: 00:00:53
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:03
bmax according to bmaxDivN setting: 98261053
Using parameters --bmax 73695790 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 73695790 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:07
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:03
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:04
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 4.91305e+07 (target: 73695789)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (73695790) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 37613430 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:09
Returning block of 37613431 for bucket 1
Getting block 2 of 8
  Reserving size (73695790) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 41866272 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:10
Returning block of 41866273 for bucket 2
Getting block 3 of 8
  Reserving size (73695790) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 37257041 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:09
Returning block of 37257042 for bucket 3
Getting block 4 of 8
  Reserving size (73695790) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 66602163 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:16
Returning block of 66602164 for bucket 4
Getting block 5 of 8
  Reserving size (73695790) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 42641463 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:10
Returning block of 42641464 for bucket 5
Getting block 6 of 8
  Reserving size (73695790) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 53896319 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:12
Returning block of 53896320 for bucket 6
Getting block 7 of 8
  Reserving size (73695790) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 39626272 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:08
Returning block of 39626273 for bucket 7
Getting block 8 of 8
  Reserving size (73695790) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 73541248 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:16
Returning block of 73541249 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 76529775
fchr[G]: 197405685
fchr[T]: 317535222
fchr[$]: 393044215
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 192166820 bytes to primary EBWT file: 02_mapping/SRR6048908/contigs.1.bt2
Wrote 98261060 bytes to secondary EBWT file: 02_mapping/SRR6048908/contigs.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 393044215
    bwtLen: 393044216
    sz: 98261054
    bwtSz: 98261054
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 24565264
    offsSz: 98261056
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 2047106
    numLines: 2047106
    ebwtTotLen: 131014784
    ebwtTotSz: 131014784
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:05:03
Reading reference sizes
  Time reading reference sizes: 00:00:02
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:03
  Time to reverse reference sequence: 00:00:01
bmax according to bmaxDivN setting: 98261053
Using parameters --bmax 73695790 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 73695790 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:07
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:02
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:04
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 5.61492e+07 (target: 73695789)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (73695790) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68519303 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:15
Returning block of 68519304 for bucket 1
Getting block 2 of 7
  Reserving size (73695790) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 59954957 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:13
Returning block of 59954958 for bucket 2
Getting block 3 of 7
  Reserving size (73695790) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 54537950 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:12
Returning block of 54537951 for bucket 3
Getting block 4 of 7
  Reserving size (73695790) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 54778438 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:13
Returning block of 54778439 for bucket 4
Getting block 5 of 7
  Reserving size (73695790) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 73378061 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:17
Returning block of 73378062 for bucket 5
Getting block 6 of 7
  Reserving size (73695790) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 63718346 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:14
Returning block of 63718347 for bucket 6
Getting block 7 of 7
  Reserving size (73695790) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 18157154 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:03
Returning block of 18157155 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 76529775
fchr[G]: 197405685
fchr[T]: 317535222
fchr[$]: 393044215
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 192166820 bytes to primary EBWT file: 02_mapping/SRR6048908/contigs.rev.1.bt2
Wrote 98261060 bytes to secondary EBWT file: 02_mapping/SRR6048908/contigs.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 393044215
    bwtLen: 393044216
    sz: 98261054
    bwtSz: 98261054
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 24565264
    offsSz: 98261056
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 2047106
    numLines: 2047106
    ebwtTotLen: 131014784
    ebwtTotSz: 131014784
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:03:48
Name                : puca_mapdepth
User                : jemizzi
Account             : ctbrowngrp
Partition           : bmm
Nodes               : bm8
Cores               : 4
GPUs                : 0
State               : COMPLETED
ExitCode            : 0:0
Submit              : 2022-01-04T21:29:32
Start               : 2022-01-04T21:29:50
End                 : 2022-01-04T22:20:16
Waited              : 00:00:18
Reserved walltime   : 20:00:00
Used walltime       : 00:50:26
Used CPU time       : 02:22:51
% User (Computation): 72.79%
% System (I/O)      : 27.21%
Mem reserved        : 60G/node
Max Mem used        : 1.25G (bm8)
Max Disk Write      : 8.85G (bm8)
Max Disk Read       : 12.80G (bm8)
