==========================================
SLURM_JOB_ID = 42743538
SLURM_NODELIST = bm16
==========================================
Settings:
  Output files: "02_mapping/ERR3588763/MAPPING_OUTPUT.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  01_megahit/ERR3588763/final.contigs.fa
Reading reference sizes
  Time reading reference sizes: 00:00:54
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:09
bmax according to bmaxDivN setting: 363318046
Using parameters --bmax 272488535 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 272488535 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:27
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:10
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:17
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2.42212e+08 (target: 272488534)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 6
  Reserving size (272488535) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 252376397 for bucket 1
  (Using difference cover)
  Sorting block time: 00:01:06
Returning block of 252376398 for bucket 1
Getting block 2 of 6
  Reserving size (272488535) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 225397938 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:58
Returning block of 225397939 for bucket 2
Getting block 3 of 6
  Reserving size (272488535) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 223940491 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:59
Returning block of 223940492 for bucket 3
Getting block 4 of 6
  Reserving size (272488535) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 260159621 for bucket 4
  (Using difference cover)
  Sorting block time: 00:01:10
Returning block of 260159622 for bucket 4
Getting block 5 of 6
  Reserving size (272488535) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 245559722 for bucket 5
  (Using difference cover)
  Sorting block time: 00:01:04
Returning block of 245559723 for bucket 5
Getting block 6 of 6
  Reserving size (272488535) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 245838013 for bucket 6
  (Using difference cover)
  Sorting block time: 00:01:05
Returning block of 245838014 for bucket 6
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 310941257
fchr[G]: 730136817
fchr[T]: 1147204727
fchr[$]: 1453272187
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 720217384 bytes to primary EBWT file: 02_mapping/ERR3588763/MAPPING_OUTPUT.1.bt2
Wrote 363318052 bytes to secondary EBWT file: 02_mapping/ERR3588763/MAPPING_OUTPUT.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 1453272187
    bwtLen: 1453272188
    sz: 363318047
    bwtSz: 363318047
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 90829512
    offsSz: 363318048
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 7569126
    numLines: 7569126
    ebwtTotLen: 484424064
    ebwtTotSz: 484424064
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:15:14
Reading reference sizes
  Time reading reference sizes: 00:00:06
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:08
  Time to reverse reference sequence: 00:00:02
bmax according to bmaxDivN setting: 363318046
Using parameters --bmax 272488535 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 272488535 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:25
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:11
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:17
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.81659e+08 (target: 272488534)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (272488535) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 207795671 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:53
Returning block of 207795672 for bucket 1
Getting block 2 of 8
  Reserving size (272488535) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 195569665 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:50
Returning block of 195569666 for bucket 2
Getting block 3 of 8
  Reserving size (272488535) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 150246543 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:38
Returning block of 150246544 for bucket 3
Getting block 4 of 8
  Reserving size (272488535) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 176679938 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:45
Returning block of 176679939 for bucket 4
Getting block 5 of 8
  Reserving size (272488535) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 167872394 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:43
Returning block of 167872395 for bucket 5
Getting block 6 of 8
  Reserving size (272488535) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 173379423 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:45
Returning block of 173379424 for bucket 6
Getting block 7 of 8
  Reserving size (272488535) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 202886167 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:53
Returning block of 202886168 for bucket 7
Getting block 8 of 8
  Reserving size (272488535) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 178842379 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:44
Returning block of 178842380 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 310941257
fchr[G]: 730136817
fchr[T]: 1147204727
fchr[$]: 1453272187
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 720217384 bytes to primary EBWT file: 02_mapping/ERR3588763/MAPPING_OUTPUT.rev.1.bt2
Wrote 363318052 bytes to secondary EBWT file: 02_mapping/ERR3588763/MAPPING_OUTPUT.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 1453272187
    bwtLen: 1453272188
    sz: 363318047
    bwtSz: 363318047
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 90829512
    offsSz: 363318048
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 7569126
    numLines: 7569126
    ebwtTotLen: 484424064
    ebwtTotSz: 484424064
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:14:27
Name                : ukpig_btmap
User                : jemizzi
Account             : ctbrowngrp
Partition           : bmm
Nodes               : bm16
Cores               : 4
GPUs                : 0
State               : COMPLETED
ExitCode            : 0:0
Submit              : 2021-12-30T09:07:41
Start               : 2021-12-30T09:08:36
End                 : 2021-12-30T10:19:25
Waited              : 00:00:55
Reserved walltime   : 20:00:00
Used walltime       : 01:10:49
Used CPU time       : 03:02:10
% User (Computation): 77.27%
% System (I/O)      : 22.72%
Mem reserved        : 60G/node
Max Mem used        : 3.41G (bm16)
Max Disk Write      : 16.51G (bm16)
Max Disk Read       : 12.05G (bm16)
