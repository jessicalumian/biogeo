==========================================
SLURM_JOB_ID = 42861025
SLURM_NODELIST = bm5
==========================================
Settings:
  Output files: "02_mapping/SRR6266338/contigs.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  01_megahit/SRR6266338/final.contigs.fa
Reading reference sizes
  Time reading reference sizes: 00:04:26
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:14
bmax according to bmaxDivN setting: 527852429
Using parameters --bmax 395889322 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 395889322 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:44
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:15
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:24
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 3.51902e+08 (target: 395889321)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 6
  Reserving size (395889322) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 382596877 for bucket 1
  (Using difference cover)
  Sorting block time: 00:01:55
Returning block of 382596878 for bucket 1
Getting block 2 of 6
  Reserving size (395889322) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 373798478 for bucket 2
  (Using difference cover)
  Sorting block time: 00:01:52
Returning block of 373798479 for bucket 2
Getting block 3 of 6
  Reserving size (395889322) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 339875212 for bucket 3
  (Using difference cover)
  Sorting block time: 00:01:43
Returning block of 339875213 for bucket 3
Getting block 4 of 6
  Reserving size (395889322) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 322789462 for bucket 4
  (Using difference cover)
  Sorting block time: 00:01:38
Returning block of 322789463 for bucket 4
Getting block 5 of 6
  Reserving size (395889322) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 357180788 for bucket 5
  (Using difference cover)
  Sorting block time: 00:01:47
Returning block of 357180789 for bucket 5
Getting block 6 of 6
  Reserving size (395889322) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 335168894 for bucket 6
  (Using difference cover)
  Sorting block time: 00:01:40
Returning block of 335168895 for bucket 6
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 504487569
fchr[G]: 1061464964
fchr[T]: 1615542191
fchr[$]: 2111409716
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 1043113966 bytes to primary EBWT file: 02_mapping/SRR6266338/contigs.1.bt2
Wrote 527852436 bytes to secondary EBWT file: 02_mapping/SRR6266338/contigs.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2111409716
    bwtLen: 2111409717
    sz: 527852429
    bwtSz: 527852430
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 131963108
    offsSz: 527852432
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 10996926
    numLines: 10996926
    ebwtTotLen: 703803264
    ebwtTotSz: 703803264
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:26:23
Reading reference sizes
  Time reading reference sizes: 00:00:09
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:12
  Time to reverse reference sequence: 00:00:07
bmax according to bmaxDivN setting: 527852429
Using parameters --bmax 395889322 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 395889322 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:43
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:14
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:24
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 3.0163e+08 (target: 395889321)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (395889322) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 197486345 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:56
Returning block of 197486346 for bucket 1
Getting block 2 of 7
  Reserving size (395889322) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 207535972 for bucket 2
  (Using difference cover)
  Sorting block time: 00:01:00
Returning block of 207535973 for bucket 2
Getting block 3 of 7
  Reserving size (395889322) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 315517751 for bucket 3
  (Using difference cover)
  Sorting block time: 00:01:33
Returning block of 315517752 for bucket 3
Getting block 4 of 7
  Reserving size (395889322) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 380533455 for bucket 4
  (Using difference cover)
  Sorting block time: 00:01:53
Returning block of 380533456 for bucket 4
Getting block 5 of 7
  Reserving size (395889322) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 264634454 for bucket 5
  (Using difference cover)
  Sorting block time: 00:01:17
Returning block of 264634455 for bucket 5
Getting block 6 of 7
  Reserving size (395889322) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 393353674 for bucket 6
  (Using difference cover)
  Sorting block time: 00:01:55
Returning block of 393353675 for bucket 6
Getting block 7 of 7
  Reserving size (395889322) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 352348059 for bucket 7
  (Using difference cover)
  Sorting block time: 00:01:44
Returning block of 352348060 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 504487569
fchr[G]: 1061464964
fchr[T]: 1615542191
fchr[$]: 2111409716
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 1043113966 bytes to primary EBWT file: 02_mapping/SRR6266338/contigs.rev.1.bt2
Wrote 527852436 bytes to secondary EBWT file: 02_mapping/SRR6266338/contigs.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2111409716
    bwtLen: 2111409717
    sz: 527852429
    bwtSz: 527852430
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 131963108
    offsSz: 527852432
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 10996926
    numLines: 10996926
    ebwtTotLen: 703803264
    ebwtTotSz: 703803264
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:23:12
Name                : pseud_dryvalley_mapdepth
User                : jemizzi
Account             : ctbrowngrp
Partition           : bmm
Nodes               : bm5
Cores               : 4
GPUs                : 0
State               : COMPLETED
ExitCode            : 0:0
Submit              : 2022-01-04T21:39:13
Start               : 2022-01-04T21:39:31
End                 : 2022-01-05T00:59:57
Waited              : 00:00:18
Reserved walltime   : 20:00:00
Used walltime       : 03:20:26
Used CPU time       : 07:44:50
% User (Computation): 80.42%
% System (I/O)      : 19.58%
Mem reserved        : 60G/node
Max Mem used        : 5.09G (bm5)
Max Disk Write      : 25.60G (bm5)
Max Disk Read       : 38.70G (bm5)
