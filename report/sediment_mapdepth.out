==========================================
SLURM_JOB_ID = 42860798
SLURM_NODELIST = bm2
==========================================
Settings:
  Output files: "02_mapping/ERR1333181/contigs.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  01_megahit/ERR1333181/final.contigs.fa
Reading reference sizes
  Time reading reference sizes: 00:02:13
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:06
bmax according to bmaxDivN setting: 239812251
Using parameters --bmax 179859189 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 179859189 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:21
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:08
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:11
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 2; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.37036e+08 (target: 179859188)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (179859189) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 132282473 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:36
Returning block of 132282474 for bucket 1
Getting block 2 of 7
  Reserving size (179859189) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 147305318 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:40
Returning block of 147305319 for bucket 2
Getting block 3 of 7
  Reserving size (179859189) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 113952993 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:35
Returning block of 113952994 for bucket 3
Getting block 4 of 7
  Reserving size (179859189) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 150781059 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:42
Returning block of 150781060 for bucket 4
Getting block 5 of 7
  Reserving size (179859189) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 152384563 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:43
Returning block of 152384564 for bucket 5
Getting block 6 of 7
  Reserving size (179859189) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 173808267 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:52
Returning block of 173808268 for bucket 6
Getting block 7 of 7
  Reserving size (179859189) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88734327 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:23
Returning block of 88734328 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 203239524
fchr[G]: 481933500
fchr[T]: 759121459
fchr[$]: 959249006
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 461398167 bytes to primary EBWT file: 02_mapping/ERR1333181/contigs.1.bt2
Wrote 239812256 bytes to secondary EBWT file: 02_mapping/ERR1333181/contigs.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 959249006
    bwtLen: 959249007
    sz: 239812252
    bwtSz: 239812252
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 59953063
    offsSz: 239812252
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 4996089
    numLines: 4996089
    ebwtTotLen: 319749696
    ebwtTotSz: 319749696
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:13:23
Reading reference sizes
  Time reading reference sizes: 00:00:05
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:06
  Time to reverse reference sequence: 00:00:03
bmax according to bmaxDivN setting: 239812251
Using parameters --bmax 179859189 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 179859189 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:19
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:07
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:12
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 8; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.37036e+08 (target: 179859188)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (179859189) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 100760646 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:26
Returning block of 100760647 for bucket 1
Getting block 2 of 7
  Reserving size (179859189) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 177104277 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:52
Returning block of 177104278 for bucket 2
Getting block 3 of 7
  Reserving size (179859189) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 168283922 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:48
Returning block of 168283923 for bucket 3
Getting block 4 of 7
  Reserving size (179859189) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 178531169 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:52
Returning block of 178531170 for bucket 4
Getting block 5 of 7
  Reserving size (179859189) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 114768799 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:33
Returning block of 114768800 for bucket 5
Getting block 6 of 7
  Reserving size (179859189) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 87595468 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:25
Returning block of 87595469 for bucket 6
Getting block 7 of 7
  Reserving size (179859189) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 132204719 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:39
Returning block of 132204720 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 203239524
fchr[G]: 481933500
fchr[T]: 759121459
fchr[$]: 959249006
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 461398167 bytes to primary EBWT file: 02_mapping/ERR1333181/contigs.rev.1.bt2
Wrote 239812256 bytes to secondary EBWT file: 02_mapping/ERR1333181/contigs.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 959249006
    bwtLen: 959249007
    sz: 239812252
    bwtSz: 239812252
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 59953063
    offsSz: 239812252
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 4996089
    numLines: 4996089
    ebwtTotLen: 319749696
    ebwtTotSz: 319749696
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:11:14
Name                : sediment_mapdepth
User                : jemizzi
Account             : ctbrowngrp
Partition           : bmm
Nodes               : bm2
Cores               : 4
GPUs                : 0
State               : COMPLETED
ExitCode            : 0:0
Submit              : 2022-01-04T21:27:35
Start               : 2022-01-04T21:27:48
End                 : 2022-01-04T23:30:16
Waited              : 00:00:13
Reserved walltime   : 20:00:00
Used walltime       : 02:02:28
Used CPU time       : 05:03:53
% User (Computation): 68.18%
% System (I/O)      : 31.82%
Mem reserved        : 60G/node
Max Mem used        : 2.46G (bm2)
Max Disk Write      : 17.93G (bm2)
Max Disk Read       : 26.45G (bm2)
