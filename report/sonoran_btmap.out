==========================================
SLURM_JOB_ID = 42447207
SLURM_NODELIST = bm4
==========================================
Settings:
  Output files: "02_mapping/SRR5247052.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  01_megahit/SRR5247052/final.contigs.fa
Reading reference sizes
  Time reading reference sizes: 00:02:44
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:17
bmax according to bmaxDivN setting: 661455212
Using parameters --bmax 496091409 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 496091409 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:01:03
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:23
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:32
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 3.77974e+08 (target: 496091408)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (496091409) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 316939648 for bucket 1
  (Using difference cover)
  Sorting block time: 00:01:54
Returning block of 316939649 for bucket 1
Getting block 2 of 7
  Reserving size (496091409) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 432996480 for bucket 2
  (Using difference cover)
  Sorting block time: 00:02:39
Returning block of 432996481 for bucket 2
Getting block 3 of 7
  Reserving size (496091409) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 153645359 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:50
Returning block of 153645360 for bucket 3
Getting block 4 of 7
  Reserving size (496091409) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 475000579 for bucket 4
  (Using difference cover)
  Sorting block time: 00:02:34
Returning block of 475000580 for bucket 4
Getting block 5 of 7
  Reserving size (496091409) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 374737852 for bucket 5
  (Using difference cover)
  Sorting block time: 00:02:05
Returning block of 374737853 for bucket 5
Getting block 6 of 7
  Reserving size (496091409) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 399188431 for bucket 6
  (Using difference cover)
  Sorting block time: 00:02:32
Returning block of 399188432 for bucket 6
Getting block 7 of 7
  Reserving size (496091409) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 493312496 for bucket 7
  (Using difference cover)
  Sorting block time: 00:02:50
Returning block of 493312497 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 550206563
fchr[G]: 1330522114
fchr[T]: 2105886556
fchr[$]: 2645820851
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 1321077701 bytes to primary EBWT file: 02_mapping/SRR5247052.1.bt2
Wrote 661455220 bytes to secondary EBWT file: 02_mapping/SRR5247052.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2645820851
    bwtLen: 2645820852
    sz: 661455213
    bwtSz: 661455213
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 165363804
    offsSz: 661455216
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13780317
    numLines: 13780317
    ebwtTotLen: 881940288
    ebwtTotSz: 881940288
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:36:14
Reading reference sizes
  Time reading reference sizes: 00:00:11
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:16
  Time to reverse reference sequence: 00:00:08
bmax according to bmaxDivN setting: 661455212
Using parameters --bmax 496091409 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 496091409 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:01:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:22
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:32
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 3.30728e+08 (target: 496091408)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (496091409) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 254437787 for bucket 1
  (Using difference cover)
  Sorting block time: 00:01:26
Returning block of 254437788 for bucket 1
Getting block 2 of 8
  Reserving size (496091409) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 391335170 for bucket 2
  (Using difference cover)
  Sorting block time: 00:02:13
Returning block of 391335171 for bucket 2
Getting block 3 of 8
  Reserving size (496091409) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 420340666 for bucket 3
  (Using difference cover)
  Sorting block time: 00:02:18
Returning block of 420340667 for bucket 3
Getting block 4 of 8
  Reserving size (496091409) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 248164046 for bucket 4
  (Using difference cover)
  Sorting block time: 00:01:20
Returning block of 248164047 for bucket 4
Getting block 5 of 8
  Reserving size (496091409) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 417153843 for bucket 5
  (Using difference cover)
  Sorting block time: 00:02:27
Returning block of 417153844 for bucket 5
Getting block 6 of 8
  Reserving size (496091409) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 110309390 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:39
Returning block of 110309391 for bucket 6
Getting block 7 of 8
  Reserving size (496091409) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 449411612 for bucket 7
  (Using difference cover)
  Sorting block time: 00:02:47
Returning block of 449411613 for bucket 7
Getting block 8 of 8
  Reserving size (496091409) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 354668330 for bucket 8
  (Using difference cover)
  Sorting block time: 00:02:14
Returning block of 354668331 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 550206563
fchr[G]: 1330522114
fchr[T]: 2105886556
fchr[$]: 2645820851
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 1321077701 bytes to primary EBWT file: 02_mapping/SRR5247052.rev.1.bt2
Wrote 661455220 bytes to secondary EBWT file: 02_mapping/SRR5247052.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2645820851
    bwtLen: 2645820852
    sz: 661455213
    bwtSz: 661455213
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 165363804
    offsSz: 661455216
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13780317
    numLines: 13780317
    ebwtTotLen: 881940288
    ebwtTotSz: 881940288
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:38:00
Name                : sonoran_btmap
User                : jemizzi
Account             : ctbrowngrp
Partition           : bmm
Nodes               : bm4
Cores               : 4
GPUs                : 0
State               : COMPLETED
ExitCode            : 0:0
Submit              : 2021-12-14T21:37:47
Start               : 2021-12-14T21:37:47
End                 : 2021-12-15T00:41:51
Waited              : 00:00:00
Reserved walltime   : 20:00:00
Used walltime       : 03:04:04
Used CPU time       : 08:24:58
% User (Computation): 86.27%
% System (I/O)      : 13.73%
Mem reserved        : 60G/node
Max Mem used        : 5.99G (bm4)
Max Disk Write      : 30.78G (bm4)
Max Disk Read       : 23.95G (bm4)
