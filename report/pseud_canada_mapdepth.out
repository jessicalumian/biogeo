==========================================
SLURM_JOB_ID = 42861035
SLURM_NODELIST = bm6
==========================================
Settings:
  Output files: "02_mapping/SRR5829599/contigs.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  01_megahit/SRR5829599/final.contigs.fa
Reading reference sizes
  Time reading reference sizes: 00:03:19
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:12
bmax according to bmaxDivN setting: 469256290
Using parameters --bmax 351942218 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 351942218 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:39
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:13
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:22
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2.68146e+08 (target: 351942217)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (351942218) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 320499764 for bucket 1
  (Using difference cover)
  Sorting block time: 00:01:37
Returning block of 320499765 for bucket 1
Getting block 2 of 7
  Reserving size (351942218) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 226799645 for bucket 2
  (Using difference cover)
  Sorting block time: 00:01:08
Returning block of 226799646 for bucket 2
Getting block 3 of 7
  Reserving size (351942218) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 348228815 for bucket 3
  (Using difference cover)
  Sorting block time: 00:01:45
Returning block of 348228816 for bucket 3
Getting block 4 of 7
  Reserving size (351942218) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 277858344 for bucket 4
  (Using difference cover)
  Sorting block time: 00:01:23
Returning block of 277858345 for bucket 4
Getting block 5 of 7
  Reserving size (351942218) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 210284237 for bucket 5
  (Using difference cover)
  Sorting block time: 00:01:02
Returning block of 210284238 for bucket 5
Getting block 6 of 7
  Reserving size (351942218) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 206306181 for bucket 6
  (Using difference cover)
  Sorting block time: 00:01:00
Returning block of 206306182 for bucket 6
Getting block 7 of 7
  Reserving size (351942218) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 287048168 for bucket 7
  (Using difference cover)
  Sorting block time: 00:01:26
Returning block of 287048169 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 448410142
fchr[G]: 944127346
fchr[T]: 1437563810
fchr[$]: 1877025160
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 911183345 bytes to primary EBWT file: 02_mapping/SRR5829599/contigs.1.bt2
Wrote 469256296 bytes to secondary EBWT file: 02_mapping/SRR5829599/contigs.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 1877025160
    bwtLen: 1877025161
    sz: 469256290
    bwtSz: 469256291
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 117314073
    offsSz: 469256292
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 9776173
    numLines: 9776173
    ebwtTotLen: 625675072
    ebwtTotSz: 625675072
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:23:24
Reading reference sizes
  Time reading reference sizes: 00:00:08
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:12
  Time to reverse reference sequence: 00:00:06
bmax according to bmaxDivN setting: 469256290
Using parameters --bmax 351942218 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 351942218 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:38
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:13
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:22
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2.34628e+08 (target: 351942217)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (351942218) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 222289419 for bucket 1
  (Using difference cover)
  Sorting block time: 00:01:09
Returning block of 222289420 for bucket 1
Getting block 2 of 8
  Reserving size (351942218) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 244175489 for bucket 2
  (Using difference cover)
  Sorting block time: 00:01:14
Returning block of 244175490 for bucket 2
Getting block 3 of 8
  Reserving size (351942218) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 330453486 for bucket 3
  (Using difference cover)
  Sorting block time: 00:01:38
Returning block of 330453487 for bucket 3
Getting block 4 of 8
  Reserving size (351942218) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 194168752 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:56
Returning block of 194168753 for bucket 4
Getting block 5 of 8
  Reserving size (351942218) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 278543506 for bucket 5
  (Using difference cover)
  Sorting block time: 00:01:19
Returning block of 278543507 for bucket 5
Getting block 6 of 8
  Reserving size (351942218) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 89957586 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:26
Returning block of 89957587 for bucket 6
Getting block 7 of 8
  Reserving size (351942218) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 320840560 for bucket 7
  (Using difference cover)
  Sorting block time: 00:01:35
Returning block of 320840561 for bucket 7
Getting block 8 of 8
  Reserving size (351942218) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 196596355 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:56
Returning block of 196596356 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 448410142
fchr[G]: 944127346
fchr[T]: 1437563810
fchr[$]: 1877025160
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 911183345 bytes to primary EBWT file: 02_mapping/SRR5829599/contigs.rev.1.bt2
Wrote 469256296 bytes to secondary EBWT file: 02_mapping/SRR5829599/contigs.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 1877025160
    bwtLen: 1877025161
    sz: 469256290
    bwtSz: 469256291
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 117314073
    offsSz: 469256292
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 9776173
    numLines: 9776173
    ebwtTotLen: 625675072
    ebwtTotSz: 625675072
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:22:13
Name                : pseud_canada_mapdepth
User                : jemizzi
Account             : ctbrowngrp
Partition           : bmm
Nodes               : bm6
Cores               : 4
GPUs                : 0
State               : COMPLETED
ExitCode            : 0:0
Submit              : 2022-01-04T21:40:22
Start               : 2022-01-04T21:40:32
End                 : 2022-01-05T02:15:08
Waited              : 00:00:10
Reserved walltime   : 20:00:00
Used walltime       : 04:34:36
Used CPU time       : 14:07:49
% User (Computation): 89.96%
% System (I/O)      : 10.04%
Mem reserved        : 60G/node
Max Mem used        : 4.77G (bm6)
Max Disk Write      : 43.74G (bm6)
Max Disk Read       : 61.92G (bm6)
