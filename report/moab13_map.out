==========================================
SLURM_JOB_ID = 41627589
SLURM_NODELIST = bm3
==========================================
Settings:
  Output files: "02_mapping/SRR5855413.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  01_megahit/SRR5855413/final.contigs.fa
Reading reference sizes
  Time reading reference sizes: 00:01:03
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:15
bmax according to bmaxDivN setting: 578368070
Using parameters --bmax 433776053 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 433776053 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:47
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:17
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:27
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 5; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2.89184e+08 (target: 433776052)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (433776053) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 167764262 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:51
Returning block of 167764263 for bucket 1
Getting block 2 of 8
  Reserving size (433776053) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 339715240 for bucket 2
  (Using difference cover)
  Sorting block time: 00:01:44
Returning block of 339715241 for bucket 2
Getting block 3 of 8
  Reserving size (433776053) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 269103500 for bucket 3
  (Using difference cover)
  Sorting block time: 00:01:22
Returning block of 269103501 for bucket 3
Getting block 4 of 8
  Reserving size (433776053) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 386353849 for bucket 4
  (Using difference cover)
  Sorting block time: 00:02:00
Returning block of 386353850 for bucket 4
Getting block 5 of 8
  Reserving size (433776053) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 264484028 for bucket 5
  (Using difference cover)
  Sorting block time: 00:01:21
Returning block of 264484029 for bucket 5
Getting block 6 of 8
  Reserving size (433776053) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 321545693 for bucket 6
  (Using difference cover)
  Sorting block time: 00:01:39
Returning block of 321545694 for bucket 6
Getting block 7 of 8
  Reserving size (433776053) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 333945883 for bucket 7
  (Using difference cover)
  Sorting block time: 00:01:43
Returning block of 333945884 for bucket 7
Getting block 8 of 8
  Reserving size (433776053) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 230559819 for bucket 8
  (Using difference cover)
  Sorting block time: 00:01:11
Returning block of 230559820 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 481352831
fchr[G]: 1162936855
fchr[T]: 1840657717
fchr[$]: 2313472281
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 1147587810 bytes to primary EBWT file: 02_mapping/SRR5855413.1.bt2
Wrote 578368076 bytes to secondary EBWT file: 02_mapping/SRR5855413.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2313472281
    bwtLen: 2313472282
    sz: 578368071
    bwtSz: 578368071
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 144592018
    offsSz: 578368072
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 12049335
    numLines: 12049335
    ebwtTotLen: 771157440
    ebwtTotSz: 771157440
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:27:51
Reading reference sizes
  Time reading reference sizes: 00:00:10
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:14
  Time to reverse reference sequence: 00:00:07
bmax according to bmaxDivN setting: 578368070
Using parameters --bmax 433776053 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 433776053 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:47
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:17
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:27
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 5; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2.89184e+08 (target: 433776052)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (433776053) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 198654249 for bucket 1
  (Using difference cover)
  Sorting block time: 00:01:01
Returning block of 198654250 for bucket 1
Getting block 2 of 8
  Reserving size (433776053) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 315865985 for bucket 2
  (Using difference cover)
  Sorting block time: 00:01:40
Returning block of 315865986 for bucket 2
Getting block 3 of 8
  Reserving size (433776053) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 240888978 for bucket 3
  (Using difference cover)
  Sorting block time: 00:01:15
Returning block of 240888979 for bucket 3
Getting block 4 of 8
  Reserving size (433776053) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 264949930 for bucket 4
  (Using difference cover)
  Sorting block time: 00:01:23
Returning block of 264949931 for bucket 4
Getting block 5 of 8
  Reserving size (433776053) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 411893003 for bucket 5
  (Using difference cover)
  Sorting block time: 00:02:11
Returning block of 411893004 for bucket 5
Getting block 6 of 8
  Reserving size (433776053) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 402277347 for bucket 6
  (Using difference cover)
  Sorting block time: 00:02:08
Returning block of 402277348 for bucket 6
Getting block 7 of 8
  Reserving size (433776053) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 208416409 for bucket 7
  (Using difference cover)
  Sorting block time: 00:01:04
Returning block of 208416410 for bucket 7
Getting block 8 of 8
  Reserving size (433776053) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 270526373 for bucket 8
  (Using difference cover)
  Sorting block time: 00:01:26
Returning block of 270526374 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 481352831
fchr[G]: 1162936855
fchr[T]: 1840657717
fchr[$]: 2313472281
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 1147587810 bytes to primary EBWT file: 02_mapping/SRR5855413.rev.1.bt2
Wrote 578368076 bytes to secondary EBWT file: 02_mapping/SRR5855413.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2313472281
    bwtLen: 2313472282
    sz: 578368071
    bwtSz: 578368071
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 144592018
    offsSz: 578368072
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 12049335
    numLines: 12049335
    ebwtTotLen: 771157440
    ebwtTotSz: 771157440
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:27:22
Name                : moab13_map
User                : jemizzi
Account             : ctbrowngrp
Partition           : bmm
Nodes               : bm3
Cores               : 4
GPUs                : 0
State               : FAILED
ExitCode            : 1:0
Submit              : 2021-12-01T09:59:37
Start               : 2021-12-01T09:59:39
End                 : 2021-12-01T10:54:59
Waited              : 00:00:02
Reserved walltime   : 20:00:00
Used walltime       : 00:55:20
Used CPU time       : 00:54:32
% User (Computation): 98.57%
% System (I/O)      :  1.43%
Mem reserved        : 60G/node
Max Mem used        : 4.87G (bm3)
Max Disk Write      : 10.24K (bm3)
Max Disk Read       : 7.16M (bm3)
