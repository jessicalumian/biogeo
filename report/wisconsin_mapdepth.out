==========================================
SLURM_JOB_ID = 42860825
SLURM_NODELIST = bm8
==========================================
Settings:
  Output files: "02_mapping/SRR5459769/contigs.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  01_megahit/SRR5459769/final.contigs.fa
Reading reference sizes
  Time reading reference sizes: 00:05:04
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:17
bmax according to bmaxDivN setting: 678446835
Using parameters --bmax 508835127 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 508835127 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:59
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:20
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:32
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 3.39223e+08 (target: 508835126)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (508835127) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 409471959 for bucket 1
  (Using difference cover)
  Sorting block time: 00:02:05
Returning block of 409471960 for bucket 1
Getting block 2 of 8
  Reserving size (508835127) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 294249827 for bucket 2
  (Using difference cover)
  Sorting block time: 00:01:30
Returning block of 294249828 for bucket 2
Getting block 3 of 8
  Reserving size (508835127) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 496182458 for bucket 3
  (Using difference cover)
  Sorting block time: 00:02:34
Returning block of 496182459 for bucket 3
Getting block 4 of 8
  Reserving size (508835127) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 410460964 for bucket 4
  (Using difference cover)
  Sorting block time: 00:02:06
Returning block of 410460965 for bucket 4
Getting block 5 of 8
  Reserving size (508835127) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 311242340 for bucket 5
  (Using difference cover)
  Sorting block time: 00:01:35
Returning block of 311242341 for bucket 5
Getting block 6 of 8
  Reserving size (508835127) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 249069516 for bucket 6
  (Using difference cover)
  Sorting block time: 00:01:16
Returning block of 249069517 for bucket 6
Getting block 7 of 8
  Reserving size (508835127) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 450626256 for bucket 7
  (Using difference cover)
  Sorting block time: 00:02:19
Returning block of 450626257 for bucket 7
Getting block 8 of 8
  Reserving size (508835127) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 92484016 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:28
Returning block of 92484017 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 685919792
fchr[G]: 1364363651
fchr[T]: 2039919990
fchr[$]: 2713787343
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 1263552922 bytes to primary EBWT file: 02_mapping/SRR5459769/contigs.1.bt2
Wrote 678446840 bytes to secondary EBWT file: 02_mapping/SRR5459769/contigs.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2713787343
    bwtLen: 2713787344
    sz: 678446836
    bwtSz: 678446836
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 169611709
    offsSz: 678446836
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14134310
    numLines: 14134310
    ebwtTotLen: 904595840
    ebwtTotSz: 904595840
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:36:17
Reading reference sizes
  Time reading reference sizes: 00:00:11
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:16
  Time to reverse reference sequence: 00:00:08
bmax according to bmaxDivN setting: 678446835
Using parameters --bmax 508835127 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 508835127 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:58
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:20
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:32
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 3.87684e+08 (target: 508835126)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (508835127) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 218816959 for bucket 1
  (Using difference cover)
  Sorting block time: 00:01:05
Returning block of 218816960 for bucket 1
Getting block 2 of 7
  Reserving size (508835127) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 486898640 for bucket 2
  (Using difference cover)
  Sorting block time: 00:02:29
Returning block of 486898641 for bucket 2
Getting block 3 of 7
  Reserving size (508835127) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 290984655 for bucket 3
  (Using difference cover)
  Sorting block time: 00:01:27
Returning block of 290984656 for bucket 3
Getting block 4 of 7
  Reserving size (508835127) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 326945071 for bucket 4
  (Using difference cover)
  Sorting block time: 00:01:38
Returning block of 326945072 for bucket 4
Getting block 5 of 7
  Reserving size (508835127) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 494438908 for bucket 5
  (Using difference cover)
  Sorting block time: 00:02:30
Returning block of 494438909 for bucket 5
Getting block 6 of 7
  Reserving size (508835127) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 451131988 for bucket 6
  (Using difference cover)
  Sorting block time: 00:02:18
Returning block of 451131989 for bucket 6
Getting block 7 of 7
  Reserving size (508835127) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 444571116 for bucket 7
  (Using difference cover)
  Sorting block time: 00:02:16
Returning block of 444571117 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 685919792
fchr[G]: 1364363651
fchr[T]: 2039919990
fchr[$]: 2713787343
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 1263552922 bytes to primary EBWT file: 02_mapping/SRR5459769/contigs.rev.1.bt2
Wrote 678446840 bytes to secondary EBWT file: 02_mapping/SRR5459769/contigs.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2713787343
    bwtLen: 2713787344
    sz: 678446836
    bwtSz: 678446836
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 169611709
    offsSz: 678446836
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14134310
    numLines: 14134310
    ebwtTotLen: 904595840
    ebwtTotSz: 904595840
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:29:25
Name                : wisconsin_mapdepth
User                : jemizzi
Account             : ctbrowngrp
Partition           : bmm
Nodes               : bm8
Cores               : 4
GPUs                : 0
State               : COMPLETED
ExitCode            : 0:0
Submit              : 2022-01-04T21:28:38
Start               : 2022-01-04T21:28:49
End                 : 2022-01-05T01:46:09
Waited              : 00:00:11
Reserved walltime   : 20:00:00
Used walltime       : 04:17:20
Used CPU time       : 11:54:18
% User (Computation): 83.55%
% System (I/O)      : 16.45%
Mem reserved        : 60G/node
Max Mem used        : 5.85G (bm8)
Max Disk Write      : 46.54G (bm8)
Max Disk Read       : 68.50G (bm8)
