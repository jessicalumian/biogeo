==========================================
SLURM_JOB_ID = 42860765
SLURM_NODELIST = bm16
==========================================
Settings:
  Output files: "02_mapping/SRR5891573/contigs.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  01_megahit/SRR5891573/final.contigs.fa
Reading reference sizes
  Time reading reference sizes: 00:05:22
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:16
bmax according to bmaxDivN setting: 636432259
Using parameters --bmax 477324195 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 477324195 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:51
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:19
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:32
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 3.63676e+08 (target: 477324194)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (477324195) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 437802480 for bucket 1
  (Using difference cover)
  Sorting block time: 00:02:12
Returning block of 437802481 for bucket 1
Getting block 2 of 7
  Reserving size (477324195) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 407137458 for bucket 2
  (Using difference cover)
  Sorting block time: 00:02:02
Returning block of 407137459 for bucket 2
Getting block 3 of 7
  Reserving size (477324195) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 391498710 for bucket 3
  (Using difference cover)
  Sorting block time: 00:01:53
Returning block of 391498711 for bucket 3
Getting block 4 of 7
  Reserving size (477324195) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 443522320 for bucket 4
  (Using difference cover)
  Sorting block time: 00:02:13
Returning block of 443522321 for bucket 4
Getting block 5 of 7
  Reserving size (477324195) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 284442565 for bucket 5
  (Using difference cover)
  Sorting block time: 00:01:22
Returning block of 284442566 for bucket 5
Getting block 6 of 7
  Reserving size (477324195) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 209070850 for bucket 6
  (Using difference cover)
  Sorting block time: 00:01:05
Returning block of 209070851 for bucket 6
Getting block 7 of 7
  Reserving size (477324195) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 372254650 for bucket 7
  (Using difference cover)
  Sorting block time: 00:01:56
Returning block of 372254651 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 485090208
fchr[G]: 1278077766
fchr[T]: 2067227907
fchr[$]: 2545729039
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 1231281865 bytes to primary EBWT file: 02_mapping/SRR5891573/contigs.1.bt2
Wrote 636432264 bytes to secondary EBWT file: 02_mapping/SRR5891573/contigs.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2545729039
    bwtLen: 2545729040
    sz: 636432260
    bwtSz: 636432260
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 159108065
    offsSz: 636432260
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13259006
    numLines: 13259006
    ebwtTotLen: 848576384
    ebwtTotSz: 848576384
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:34:04
Reading reference sizes
  Time reading reference sizes: 00:00:10
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:15
  Time to reverse reference sequence: 00:00:03
bmax according to bmaxDivN setting: 636432259
Using parameters --bmax 477324195 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 477324195 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:55
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:26
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:33
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 3.63676e+08 (target: 477324194)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (477324195) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 363496594 for bucket 1
  (Using difference cover)
  Sorting block time: 00:01:50
Returning block of 363496595 for bucket 1
Getting block 2 of 7
  Reserving size (477324195) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 272145949 for bucket 2
  (Using difference cover)
  Sorting block time: 00:01:18
Returning block of 272145950 for bucket 2
Getting block 3 of 7
  Reserving size (477324195) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 428938893 for bucket 3
  (Using difference cover)
  Sorting block time: 00:02:08
Returning block of 428938894 for bucket 3
Getting block 4 of 7
  Reserving size (477324195) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 111178470 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:31
Returning block of 111178471 for bucket 4
Getting block 5 of 7
  Reserving size (477324195) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 476179415 for bucket 5
  (Using difference cover)
  Sorting block time: 00:02:19
Returning block of 476179416 for bucket 5
Getting block 6 of 7
  Reserving size (477324195) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 457645606 for bucket 6
  (Using difference cover)
  Sorting block time: 00:02:14
Returning block of 457645607 for bucket 6
Getting block 7 of 7
  Reserving size (477324195) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 436144106 for bucket 7
  (Using difference cover)
  Sorting block time: 00:02:05
Returning block of 436144107 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 485090208
fchr[G]: 1278077766
fchr[T]: 2067227907
fchr[$]: 2545729039
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 1231281865 bytes to primary EBWT file: 02_mapping/SRR5891573/contigs.rev.1.bt2
Wrote 636432264 bytes to secondary EBWT file: 02_mapping/SRR5891573/contigs.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2545729039
    bwtLen: 2545729040
    sz: 636432260
    bwtSz: 636432260
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 159108065
    offsSz: 636432260
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13259006
    numLines: 13259006
    ebwtTotLen: 848576384
    ebwtTotSz: 848576384
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:27:58
Name                : glaciersnow_mapdepth
User                : jemizzi
Account             : ctbrowngrp
Partition           : bmm
Nodes               : bm16
Cores               : 4
GPUs                : 0
State               : COMPLETED
ExitCode            : 0:0
Submit              : 2022-01-04T21:25:18
Start               : 2022-01-04T21:25:46
End                 : 2022-01-05T00:45:06
Waited              : 00:00:28
Reserved walltime   : 20:00:00
Used walltime       : 03:19:20
Used CPU time       : 08:38:41
% User (Computation): 77.94%
% System (I/O)      : 22.05%
Mem reserved        : 60G/node
Max Mem used        : 5.59G (bm16)
Max Disk Write      : 35.53G (bm16)
Max Disk Read       : 51.68G (bm16)
